function [score] = criterionV2(B)
%CRITERION Set of criterion used to optimize the problem using CMA-Es
% Inputs:
%   - C:           coefficient of polynomial representing damping
%   profile
% Outputs:
%   - score:            objective function score value    
% Author:   Roberto Shu
%-------------------------------------------------------
global g Kg Cg;         % Environment constant
global mass maxStroke;  % Shin properties
global K;             % Spring damper properties
global Y0 PE;           % Initial conditions
global simFileName;     % Simulation file name   


% Simulate drop with query coefficients
options = simset('SrcWorkspace','current');  % Set the simmechanics simulation workspace to be the functions workspace
try
    sim(simFileName,[],options);

w = [1 1]; % cost function term weights
finalVel = 0.4429;
minStroke = 0;
maxGRF = 0;

% Calculate system energy 
workDone_damper = trapz(Fd.time,Fd.data);           % Damper energy
workDone_spring = trapz(Fs.time,Fs.data);           % Spring energy
workDone_all1 = trapz(Force.time,Force.data);       % System energy method 1
workDone_all2 = workDone_damper + workDone_spring;  % System energy method 2

score = 

% Score parameters

catch err
    score = 1e99;
    display(err);
end


end

function [val] = penalty(x,x_d)
%PENALTY calculate penalty for being close to the boundary through barrier
%function

val = -log(x_d-x)*abs((x-x_d));

end
